name: Run DeepSeek Model Temporarily

on:
  workflow_dispatch:

concurrency:
  group: deepseek-temp
  cancel-in-progress: true

jobs:
  setup_run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package.json') }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Decode rclone config
        run: |
          echo "$GDRIVE_RCLONE_B64" | base64 --decode > rclone.conf
        env:
          GDRIVE_RCLONE_B64: ${{ secrets.GDRIVE_RCLONE_B64 }}

      - name: Install rclone and ngrok
        run: |
          sudo apt-get update && sudo apt-get install -y rclone
          npm install -g ngrok

      - name: Authenticate ngrok
        run: ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Download model from Google Drive
        run: |
          rclone --config ./rclone.conf copy deepseek-drive:models/DeepSeek-R1-0528-Qwen3-8B-Q4_K_M.gguf ./model

      - name: Install backend dependencies
        working-directory: backend
        run: pip install -r requirements.txt

      - name: Install frontend dependencies and build
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Run server and expose via ngrok
        working-directory: backend
        env:
          PORT: 5000
        run: |
          # Start Flask backend
          python app.py &

          for i in {1..30}; do
            if curl -s http://localhost:5000/health | grep -q "ok"; then
            echo "Flask server is ready!"
             break
          fi
          echo "Waiting for Flask server..."
           sleep 2
           done
           
           ngrok http $PORT --log=stdout
